import { Employee, HRMetrics, HRInsight, DashboardKPI } from '../types/hr';

/**
 * ðŸŽ¯ MOTEUR D'ANALYSE RH INTELLIGENT
 * Calculs basÃ©s exclusivement sur vos donnÃ©es rÃ©elles
 */
export class HRAnalyticsEngine {
  
  /**
   * âœ… CALCUL DES MÃ‰TRIQUES RH AVANCÃ‰ES
   * BasÃ© sur vos 8 champs : ID, NOMS, SEXE, NATIONALITE, AGE, ANCIENNETE, POSTE, AFFECTATION, ANNEE_EMBAUCHE
   */
  static calculateEmployeeMetrics(employee: Employee): HRMetrics {
    // ðŸŽ¯ RISQUE RETRAITE â†’ CalculÃ© depuis AGE
    const retirementRisk = employee.AGE >= 62 ? 'Critique' :
                          employee.AGE >= 58 ? 'Ã‰levÃ©' :
                          employee.AGE >= 55 ? 'ModÃ©rÃ©' : 'Faible';

    // ðŸŽ¯ PERFORMANCE â†’ CalculÃ© depuis ANCIENNETE + AGE + POSTE
    const basePerformance = (employee.ANCIENNETE * 3) + (employee.AGE * 0.8);
    const positionBonus = employee.POSTE.toLowerCase().includes('directeur') ? 20 :
                         employee.POSTE.toLowerCase().includes('resp') ? 15 :
                         employee.POSTE.toLowerCase().includes('admin') ? 10 : 5;
    
    const performanceScore = basePerformance + positionBonus;
    const performanceLevel = performanceScore > 80 ? 'Excellent' :
                            performanceScore > 60 ? 'Bon' :
                            performanceScore > 40 ? 'Satisfaisant' :
                            performanceScore > 25 ? 'Ã€ amÃ©liorer' : 'Insuffisant';

    // ðŸŽ¯ RISQUE TURNOVER â†’ CalculÃ© depuis ANCIENNETE + AGE + DATE_FIN_CONTRAT
    const turnoverScore = (employee.ANCIENNETE < 1 ? 40 : 0) +
                         (employee.ANCIENNETE < 3 ? 20 : 0) +
                         (employee.AGE < 25 ? 15 : 0) +
                         (employee.AGE > 55 ? 10 : 0) +
                         (employee.DATE_FIN_CONTRAT ? 25 : 0);
    
    const turnoverRisk = turnoverScore > 50 ? 'Critique' :
                        turnoverScore > 35 ? 'Ã‰levÃ©' :
                        turnoverScore > 20 ? 'ModÃ©rÃ©' :
                        turnoverScore > 10 ? 'Faible' : 'TrÃ¨s faible';

    // ðŸŽ¯ NIVEAU COMPÃ‰TENCES â†’ CalculÃ© depuis ANCIENNETE + POSTE
    const skillScore = employee.ANCIENNETE + 
                      (employee.POSTE.toLowerCase().includes('directeur') ? 10 : 0) +
                      (employee.POSTE.toLowerCase().includes('resp') ? 5 : 0);
    
    const skillLevel = skillScore > 20 ? 'Expert' :
                      skillScore > 15 ? 'AvancÃ©' :
                      skillScore > 8 ? 'IntermÃ©diaire' :
                      skillScore > 3 ? 'DÃ©butant' : 'En formation';

    // ðŸŽ¯ BESOINS FORMATION â†’ CalculÃ© depuis AGE + ANCIENNETE + POSTE
    const trainingScore = Math.max(0, 25 - employee.ANCIENNETE) + 
                         (employee.AGE < 35 ? 10 : 0) +
                         (skillLevel === 'DÃ©butant' ? 15 : 0);
    
    const trainingNeeds = trainingScore > 30 ? 'Urgent' :
                         trainingScore > 20 ? 'Prioritaire' :
                         trainingScore > 10 ? 'Souhaitable' :
                         trainingScore > 5 ? 'Optionnel' : 'Aucun';

    // ðŸŽ¯ PARCOURS CARRIÃˆRE â†’ CalculÃ© depuis AGE + ANCIENNETE + PERFORMANCE
    const careerPath = employee.AGE < 30 && performanceLevel === 'Excellent' ? 'Ascendant' :
                      employee.AGE > 55 && employee.ANCIENNETE > 20 ? 'Stable' :
                      employee.AGE > 50 && performanceLevel !== 'Excellent' ? 'Plateau' :
                      performanceLevel === 'Ã€ amÃ©liorer' ? 'Transition' : 'Stable';

    // ðŸŽ¯ SUCCESSION â†’ CalculÃ© depuis PERFORMANCE + ANCIENNETE + AGE
    const successorReadiness = performanceLevel === 'Excellent' && employee.ANCIENNETE > 8 && employee.AGE < 50 ? 'PrÃªt maintenant' :
                              performanceLevel === 'Bon' && employee.ANCIENNETE > 5 ? 'PrÃªt dans 1 an' :
                              performanceLevel === 'Satisfaisant' && employee.ANCIENNETE > 3 ? 'PrÃªt dans 2-3 ans' :
                              performanceLevel !== 'Insuffisant' ? 'DÃ©veloppement requis' : 'Non identifiÃ©';

    // ðŸŽ¯ RÃ‰TENTION â†’ CalculÃ© depuis ANCIENNETE + PERFORMANCE + AGE + TURNOVER RISK
    let retentionBase = 50;
    if (employee.ANCIENNETE > 15) retentionBase += 30;
    else if (employee.ANCIENNETE > 10) retentionBase += 25;
    else if (employee.ANCIENNETE > 5) retentionBase += 15;
    else if (employee.ANCIENNETE > 2) retentionBase += 10;
    
    if (performanceLevel === 'Excellent') retentionBase += 15;
    else if (performanceLevel === 'Bon') retentionBase += 10;
    else if (performanceLevel === 'Ã€ amÃ©liorer') retentionBase -= 10;
    else if (performanceLevel === 'Insuffisant') retentionBase -= 20;
    
    if (employee.AGE > 55) retentionBase -= 15;
    else if (employee.AGE < 25) retentionBase -= 10;
    
    // Ajustement basÃ© sur le risque de turnover
    if (turnoverRisk === 'Critique') retentionBase -= 25;
    else if (turnoverRisk === 'Ã‰levÃ©') retentionBase -= 15;
    else if (turnoverRisk === 'ModÃ©rÃ©') retentionBase -= 5;
    else if (turnoverRisk === 'TrÃ¨s faible') retentionBase += 10;
    
    const retentionProbability = Math.min(95, Math.max(20, retentionBase));

    // ðŸŽ¯ DÃ‰PARTEMENT â†’ CalculÃ© depuis POSTE
    const department = this.extractDepartment(employee.POSTE);

    // ðŸŽ¯ NIVEAU MANAGEMENT â†’ CalculÃ© depuis POSTE
    const managementLevel = this.extractManagementLevel(employee.POSTE);

    // ðŸŽ¯ SALAIRE INTELLIGENT â†’ CalculÃ© depuis POSTE + ANCIENNETE + AGE + PERFORMANCE
    const salary = this.calculateSalary(employee, performanceLevel);

    // ðŸŽ¯ SCORE INCLUSION â†’ CalculÃ© depuis NATIONALITE + AGE + ANCIENNETE + SEXE
    const inclusionScore = this.calculateInclusionScore(employee);

    // ðŸŽ¯ INDICE DE TURNOVER â†’ CalculÃ© depuis ANCIENNETE + AGE + PERFORMANCE + CONTRAT
    const turnoverIndex = this.calculateTurnoverIndex(employee, performanceLevel, turnoverRisk);

    return {
      retirementRisk,
      performanceLevel,
      turnoverRisk,
      skillLevel,
      trainingNeeds,
      careerPath,
      successorReadiness,
      retentionProbability,
      department,
      managementLevel,
      salary,
      inclusionScore,
      turnoverIndex,
    };
  }

  /**
   * ðŸŽ¯ EXTRACTION DU DÃ‰PARTEMENT DEPUIS LE POSTE
   */
  private static extractDepartment(poste: string): string {
    const posteLower = poste.toLowerCase();
    
    if (posteLower.includes('directeur')) return 'Direction';
    if (posteLower.includes('admin') || posteLower.includes('rh')) return 'Administration';
    if (posteLower.includes('chauffeur') || posteLower.includes('transport')) return 'Logistique';
    if (posteLower.includes('motor') || posteLower.includes('production')) return 'Production';
    if (posteLower.includes('commercial') || posteLower.includes('vente')) return 'Commercial';
    if (posteLower.includes('finance') || posteLower.includes('compta')) return 'Finance';
    if (posteLower.includes('it') || posteLower.includes('informatique')) return 'IT';
    if (posteLower.includes('maintenance') || posteLower.includes('technique')) return 'Technique';
    
    return 'Support';
  }

  /**
   * ðŸŽ¯ EXTRACTION DU NIVEAU DE MANAGEMENT DEPUIS LE POSTE
   */
  private static extractManagementLevel(poste: string): string {
    const posteLower = poste.toLowerCase();
    
    if (posteLower.includes('directeur gÃ©nÃ©ral') || posteLower.includes('pdg')) return 'Direction gÃ©nÃ©rale';
    if (posteLower.includes('directeur')) return 'Direction';
    if (posteLower.includes('resp') || posteLower.includes('manager')) return 'Management';
    if (posteLower.includes('chef') || posteLower.includes('superviseur')) return 'Supervision';
    if (posteLower.includes('senior') || posteLower.includes('principal')) return 'Senior';
    
    return 'OpÃ©rationnel';
  }

  /**
   * ðŸŽ¯ CALCUL INTELLIGENT DU SALAIRE
   */
  private static calculateSalary(employee: Employee, performanceLevel: string): number {
    // Base salariale par poste
    const salaryBase = {
      'directeur gÃ©nÃ©ral': 120000,
      'directeur': 85000,
      'resp': 55000,
      'manager': 50000,
      'admin': 38000,
      'chauffeur': 32000,
      'motor': 35000,
      'technique': 40000,
      'commercial': 45000,
      'default': 35000
    };

    let baseSalary = salaryBase.default;
    const posteLower = employee.POSTE.toLowerCase();
    
    // DÃ©termination du salaire de base
    if (posteLower.includes('directeur gÃ©nÃ©ral')) baseSalary = salaryBase['directeur gÃ©nÃ©ral'];
    else if (posteLower.includes('directeur')) baseSalary = salaryBase.directeur;
    else if (posteLower.includes('resp')) baseSalary = salaryBase.resp;
    else if (posteLower.includes('manager')) baseSalary = salaryBase.manager;
    else if (posteLower.includes('admin')) baseSalary = salaryBase.admin;
    else if (posteLower.includes('chauffeur')) baseSalary = salaryBase.chauffeur;
    else if (posteLower.includes('motor')) baseSalary = salaryBase.motor;
    else if (posteLower.includes('technique')) baseSalary = salaryBase.technique;
    else if (posteLower.includes('commercial')) baseSalary = salaryBase.commercial;

    // Bonus d'anciennetÃ© (1.5% par annÃ©e)
    const tenureBonus = baseSalary * (employee.ANCIENNETE * 0.015);
    
    // Bonus d'expÃ©rience (Ã¢ge - 22) * 800â‚¬
    const experienceBonus = Math.max(0, (employee.AGE - 22) * 800);
    
    // Bonus de performance
    const performanceMultiplier = {
      'Excellent': 1.25,
      'Bon': 1.15,
      'Satisfaisant': 1.05,
      'Ã€ amÃ©liorer': 0.95,
      'Insuffisant': 0.85
    };
    
    const performanceBonus = baseSalary * (performanceMultiplier[performanceLevel] - 1);
    
    return Math.round(baseSalary + tenureBonus + experienceBonus + performanceBonus);
  }

  /**
   * ðŸŽ¯ CALCUL DU SCORE D'INCLUSION
   */
  private static calculateInclusionScore(employee: Employee): number {
    let score = 70; // Base
    
    // Bonus diversitÃ© culturelle
    if (employee.NATIONALITE !== 'FranÃ§aise') score += 12;
    
    // Bonus Ã©quilibre gÃ©nÃ©rationnel
    if (employee.AGE >= 25 && employee.AGE <= 55) score += 8;
    else if (employee.AGE < 25 || employee.AGE > 55) score += 5;
    
    // Bonus stabilitÃ©
    if (employee.ANCIENNETE > 10) score += 10;
    else if (employee.ANCIENNETE > 5) score += 6;
    else if (employee.ANCIENNETE > 2) score += 3;
    
    // Bonus intÃ©gration
    if (employee.ANCIENNETE > 1) score += 5;
    
    return Math.min(100, score);
  }

  /**
   * ðŸŽ¯ CALCUL DE L'INDICE DE TURNOVER
   * Nouvel indicateur spÃ©cifique pour l'analyse du turnover
   */
  private static calculateTurnoverIndex(employee: Employee, performanceLevel: string, turnoverRisk: string): number {
    // Base de calcul
    let index = 50; // Point de dÃ©part neutre
    
    // Facteurs d'anciennetÃ© (impact majeur)
    if (employee.ANCIENNETE < 1) index += 30;
    else if (employee.ANCIENNETE < 2) index += 20;
    else if (employee.ANCIENNETE < 3) index += 15;
    else if (employee.ANCIENNETE < 5) index += 10;
    else if (employee.ANCIENNETE > 10) index -= 15;
    else if (employee.ANCIENNETE > 5) index -= 10;
    
    // Facteurs d'Ã¢ge
    if (employee.AGE < 25) index += 15;
    else if (employee.AGE < 30) index += 10;
    else if (employee.AGE > 55) index += 5; // Risque de dÃ©part en retraite
    else if (employee.AGE >= 35 && employee.AGE <= 45) index -= 5; // Ã‚ge de stabilitÃ©
    
    // Facteurs de performance
    if (performanceLevel === 'Excellent') index -= 15; // Moins susceptible de partir
    else if (performanceLevel === 'Bon') index -= 10;
    else if (performanceLevel === 'Ã€ amÃ©liorer') index += 15;
    else if (performanceLevel === 'Insuffisant') index += 25;
    
    // Facteur de contrat
    if (employee.DATE_FIN_CONTRAT) {
      const endDate = new Date(employee.DATE_FIN_CONTRAT);
      const currentDate = new Date();
      const monthsUntilEnd = (endDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24 * 30);
      
      if (monthsUntilEnd <= 3) index += 25; // Fin de contrat imminente
      else if (monthsUntilEnd <= 6) index += 15;
      else if (monthsUntilEnd <= 12) index += 10;
    }
    
    // Facteur de poste
    const posteLower = employee.POSTE.toLowerCase();
    if (posteLower.includes('directeur') || posteLower.includes('resp')) {
      index -= 10; // Postes Ã  responsabilitÃ© = plus stable
    }
    
    // Normalisation entre 0 et 100
    return Math.min(100, Math.max(0, index));
  }

  /**
   * ðŸŽ¯ GÃ‰NÃ‰RATION D'INSIGHTS IA
   */
  static generateHRInsights(employees: Employee[]): HRInsight[] {
    const insights: HRInsight[] = [];
    const metrics = employees.map(emp => this.calculateEmployeeMetrics(emp));
    
    // Analyse des risques de retraite
    const criticalRetirement = metrics.filter(m => m.retirementRisk === 'Critique').length;
    const highRetirement = metrics.filter(m => m.retirementRisk === 'Ã‰levÃ©').length;
    
    if (criticalRetirement > 0) {
      insights.push({
        type: 'risk',
        priority: 'critical',
        title: `${criticalRetirement} employÃ©(s) en risque critique de dÃ©part en retraite`,
        description: `Des dÃ©parts imminents nÃ©cessitent une action urgente pour assurer la continuitÃ© opÃ©rationnelle.`,
        impact: 'Perte de connaissances critiques et disruption opÃ©rationnelle',
        actions: [
          'Lancer immÃ©diatement un plan de succession',
          'Organiser le transfert de connaissances',
          'Identifier et former les remplaÃ§ants',
          'Documenter les processus critiques'
        ],
        timeline: 'ImmÃ©diat (0-3 mois)',
        kpis: ['Taux de couverture succession', 'Temps de transfert connaissances']
      });
    }

    // Analyse des performances
    const lowPerformers = metrics.filter(m => m.performanceLevel === 'Ã€ amÃ©liorer' || m.performanceLevel === 'Insuffisant').length;
    const highPerformers = metrics.filter(m => m.performanceLevel === 'Excellent').length;
    
    if (lowPerformers > employees.length * 0.15) {
      insights.push({
        type: 'recommendation',
        priority: 'high',
        title: `${lowPerformers} employÃ©(s) nÃ©cessitent un accompagnement performance`,
        description: `Un pourcentage Ã©levÃ© d'employÃ©s sous-performants impacte la productivitÃ© globale.`,
        impact: 'Baisse de productivitÃ© et risque de contagion',
        actions: [
          'Mettre en place des plans de dÃ©veloppement individuels',
          'Organiser des formations ciblÃ©es',
          'Assigner des mentors aux employÃ©s en difficultÃ©',
          'Revoir les processus et outils de travail'
        ],
        timeline: 'Court terme (3-6 mois)',
        kpis: ['Ã‰volution scores performance', 'Taux de rÃ©ussite plans dÃ©veloppement']
      });
    }

    // Analyse du turnover
    const highTurnoverRisk = metrics.filter(m => m.turnoverRisk === 'Ã‰levÃ©' || m.turnoverRisk === 'Critique').length;
    
    if (highTurnoverRisk > 0) {
      insights.push({
        type: 'alert',
        priority: 'high',
        title: `${highTurnoverRisk} employÃ©(s) Ã  risque Ã©levÃ© de dÃ©part`,
        description: `Des employÃ©s clÃ©s pourraient quitter l'organisation prochainement.`,
        impact: 'CoÃ»ts de recrutement et perte de talents',
        actions: [
          'Conduire des entretiens de rÃ©tention',
          'Revoir les packages de rÃ©munÃ©ration',
          'AmÃ©liorer les conditions de travail',
          'Proposer des opportunitÃ©s de dÃ©veloppement'
        ],
        timeline: 'Urgent (0-2 mois)',
        kpis: ['Taux de rÃ©tention', 'Satisfaction employÃ©s', 'CoÃ»t du turnover']
      });
    }

    // Analyse spÃ©cifique du turnover (nouveau)
    const turnoverIndexes = metrics.map(m => m.turnoverIndex);
    const avgTurnoverIndex = turnoverIndexes.reduce((sum, val) => sum + val, 0) / turnoverIndexes.length;
    const highTurnoverIndexEmployees = metrics.filter(m => m.turnoverIndex > 70).length;
    
    if (avgTurnoverIndex > 50 || highTurnoverIndexEmployees > employees.length * 0.1) {
      insights.push({
        type: 'risk',
        priority: avgTurnoverIndex > 60 ? 'critical' : 'high',
        title: `Indice de turnover Ã©levÃ©: ${Math.round(avgTurnoverIndex)}/100`,
        description: `L'analyse prÃ©dictive indique un risque de turnover supÃ©rieur Ã  la normale dans l'organisation.`,
        impact: 'InstabilitÃ© des Ã©quipes, coÃ»ts de recrutement Ã©levÃ©s et perte de productivitÃ©',
        actions: [
          'RÃ©aliser une enquÃªte de satisfaction et d\'engagement',
          'Analyser les causes profondes des dÃ©parts rÃ©cents',
          'Mettre en place un programme de fidÃ©lisation ciblÃ©',
          'Revoir la politique salariale et les avantages sociaux',
          'AmÃ©liorer les parcours de carriÃ¨re internes'
        ],
        timeline: 'Prioritaire (1-3 mois)',
        kpis: ['Taux de turnover', 'CoÃ»t par recrutement', 'DurÃ©e moyenne en poste']
      });
    }

    // OpportunitÃ©s de succession
    const readySuccessors = metrics.filter(m => m.successorReadiness === 'PrÃªt maintenant' || m.successorReadiness === 'PrÃªt dans 1 an').length;
    
    if (readySuccessors > 0) {
      insights.push({
        type: 'opportunity',
        priority: 'medium',
        title: `${readySuccessors} candidat(s) prÃªt(s) pour une promotion`,
        description: `Des talents internes sont identifiÃ©s pour des Ã©volutions de carriÃ¨re.`,
        impact: 'Motivation accrue et rÃ©tention des talents',
        actions: [
          'Planifier des promotions internes',
          'CrÃ©er des parcours de dÃ©veloppement',
          'Organiser des formations leadership',
          'Mettre en place du mentoring'
        ],
        timeline: 'Moyen terme (6-12 mois)',
        kpis: ['Taux promotion interne', 'Satisfaction carriÃ¨re', 'RÃ©tention talents']
      });
    }

    return insights.sort((a, b) => {
      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
  }

  /**
   * ðŸŽ¯ CALCUL DES KPI DASHBOARD
   */
  static calculateDashboardKPIs(employees: Employee[]): DashboardKPI {
    if (employees.length === 0) {
      return {
        totalEmployees: 0,
        avgAge: 0,
        avgTenure: 0,
        newHires: 0,
        nearRetirement: 0,
        genderRatio: { male: 0, female: 0 },
        diversityIndex: 0,
        retentionRate: 0,
        performanceIndex: 0,
        turnoverRate: 0,
        turnoverRiskIndex: 0
      };
    }
    
    const metrics = employees.map(emp => this.calculateEmployeeMetrics(emp));
    
    const totalEmployees = employees.length;
    const avgAge = employees.reduce((sum, emp) => sum + emp.AGE, 0) / totalEmployees;
    const avgTenure = employees.reduce((sum, emp) => sum + emp.ANCIENNETE, 0) / totalEmployees;
    const newHires = employees.filter(emp => emp.ANCIENNETE <= 1).length;
    const nearRetirement = employees.filter(emp => emp.AGE >= 55).length;
    
    const genderRatio = {
      male: employees.filter(emp => emp.SEXE === 'M').length,
      female: employees.filter(emp => emp.SEXE === 'F').length
    };
    
    // Calcul de l'indice de diversitÃ© (basÃ© sur nationalitÃ©s)
    const nationalities = new Set(employees.map(emp => emp.NATIONALITE));
    const diversityIndex = Math.min(100, (nationalities.size / totalEmployees) * 100 * 10);
    
    // Taux de rÃ©tention moyen
    const retentionRate = metrics.reduce((sum, m) => sum + m.retentionProbability, 0) / metrics.length;
    
    // Indice de performance global
    const performanceScores = metrics.map(m => {
      switch (m.performanceLevel) {
        case 'Excellent': return 5;
        case 'Bon': return 4;
        case 'Satisfaisant': return 3;
        case 'Ã€ amÃ©liorer': return 2;
        case 'Insuffisant': return 1;
        default: return 3;
      }
    });
    const performanceIndex = (performanceScores.reduce((sum, score) => sum + score, 0) / performanceScores.length) * 20;
    
    // Calcul du taux de turnover (nouveau)
    // Formule: (Nombre de dÃ©parts sur la pÃ©riode / Effectif moyen sur la pÃ©riode) * 100
    // Ici, nous utilisons une estimation basÃ©e sur les employÃ©s Ã  risque Ã©levÃ© de turnover
    const highTurnoverRiskCount = metrics.filter(m => m.turnoverRisk === 'Ã‰levÃ©' || m.turnoverRisk === 'Critique').length;
    const turnoverRate = (highTurnoverRiskCount / totalEmployees) * 100;
    
    // Indice de risque de turnover global (nouveau)
    const turnoverRiskIndex = metrics.reduce((sum, m) => sum + m.turnoverIndex, 0) / metrics.length;
    
    return {
      totalEmployees,
      avgAge: Math.round(avgAge * 10) / 10,
      avgTenure: Math.round(avgTenure * 10) / 10,
      newHires,
      nearRetirement,
      genderRatio,
      diversityIndex: Math.round(diversityIndex),
      retentionRate: Math.round(retentionRate),
      performanceIndex: Math.round(performanceIndex),
      turnoverRate: Math.round(turnoverRate * 10) / 10,
      turnoverRiskIndex: Math.round(turnoverRiskIndex)
    };
  }

  /**
   * ðŸŽ¯ ANALYSE DÃ‰TAILLÃ‰E DU TURNOVER
   * Nouvelle mÃ©thode spÃ©cifique pour l'analyse du turnover
   */
  static analyzeTurnover(employees: Employee[]): {
    turnoverRate: number;
    turnoverRiskIndex: number;
    highRiskEmployees: number;
    departmentRisks: Record<string, number>;
    ageGroupRisks: Record<string, number>;
    tenureGroupRisks: Record<string, number>;
    riskFactors: string[];
    recommendations: string[];
  } {
    const metrics = employees.map(emp => this.calculateEmployeeMetrics(emp));
    
    // Taux de turnover estimÃ©
    const highTurnoverRiskCount = metrics.filter(m => m.turnoverRisk === 'Ã‰levÃ©' || m.turnoverRisk === 'Critique').length;
    const turnoverRate = (highTurnoverRiskCount / employees.length) * 100;
    
    // Indice de risque moyen
    const turnoverRiskIndex = metrics.reduce((sum, m) => sum + m.turnoverIndex, 0) / metrics.length;
    
    // Analyse par dÃ©partement
    const departmentRisks: Record<string, number> = {};
    const departments = [...new Set(metrics.map(m => m.department))];
    
    departments.forEach(dept => {
      const deptMetrics = metrics.filter(m => m.department === dept);
      departmentRisks[dept] = deptMetrics.reduce((sum, m) => sum + m.turnoverIndex, 0) / deptMetrics.length;
    });
    
    // Analyse par tranche d'Ã¢ge
    const ageGroupRisks: Record<string, number> = {
      '21 - 30': 0,
      '31 - 35': 0,
      '36 - 40': 0,
      '41 - 45': 0,
      '46 - 50': 0,
      '51 - 55': 0,
      '56 - 60': 0,
      '> 60': 0
    };
    
    Object.keys(ageGroupRisks).forEach(ageGroup => {
      const groupEmployees = employees.filter(emp => emp.TRANCHE_AGE === ageGroup);
      if (groupEmployees.length > 0) {
        const groupMetrics = metrics.filter((_, i) => employees[i].TRANCHE_AGE === ageGroup);
        ageGroupRisks[ageGroup] = groupMetrics.reduce((sum, m) => sum + m.turnoverIndex, 0) / groupMetrics.length;
      }
    });
    
    // Analyse par anciennetÃ©
    const tenureGroupRisks: Record<string, number> = {
      '0 - 5': 0,
      '6 - 10': 0,
      '11 - 15': 0,
      '16 - 20': 0,
      '21+': 0
    };
    
    Object.keys(tenureGroupRisks).forEach(tenureGroup => {
      const groupEmployees = employees.filter(emp => emp.TRANCHE_ANCIENNETE === tenureGroup);
      if (groupEmployees.length > 0) {
        const groupMetrics = metrics.filter((_, i) => employees[i].TRANCHE_ANCIENNETE === tenureGroup);
        tenureGroupRisks[tenureGroup] = groupMetrics.reduce((sum, m) => sum + m.turnoverIndex, 0) / groupMetrics.length;
      }
    });
    
    // Identification des facteurs de risque
    const riskFactors: string[] = [];
    
    // Facteurs liÃ©s Ã  l'Ã¢ge
    const youngEmployeesRisk = ageGroupRisks['21 - 30'];
    if (youngEmployeesRisk > 60) {
      riskFactors.push('Forte proportion de jeunes employÃ©s Ã  risque de dÃ©part');
    }
    
    // Facteurs liÃ©s Ã  l'anciennetÃ©
    const newEmployeesRisk = tenureGroupRisks['0 - 5'];
    if (newEmployeesRisk > 60) {
      riskFactors.push('EmployÃ©s rÃ©cents prÃ©sentant un risque Ã©levÃ© de dÃ©part');
    }
    
    // Facteurs liÃ©s aux dÃ©partements
    const highRiskDepartments = Object.entries(departmentRisks)
      .filter(([_, risk]) => risk > 60)
      .map(([dept, _]) => dept);
    
    if (highRiskDepartments.length > 0) {
      riskFactors.push(`DÃ©partements Ã  risque: ${highRiskDepartments.join(', ')}`);
    }
    
    // Facteurs liÃ©s aux contrats
    const temporaryContractsCount = employees.filter(emp => emp.DATE_FIN_CONTRAT !== null).length;
    const temporaryContractsPercentage = (temporaryContractsCount / employees.length) * 100;
    
    if (temporaryContractsPercentage > 20) {
      riskFactors.push(`Proportion Ã©levÃ©e de contrats temporaires (${Math.round(temporaryContractsPercentage)}%)`);
    }
    
    // Recommandations basÃ©es sur l'analyse
    const recommendations: string[] = [];
    
    if (turnoverRate > 15) {
      recommendations.push('Mettre en place un programme de rÃ©tention des talents');
    }
    
    if (highRiskDepartments.length > 0) {
      recommendations.push(`Analyser les causes de turnover dans les dÃ©partements: ${highRiskDepartments.join(', ')}`);
    }
    
    if (newEmployeesRisk > 60) {
      recommendations.push('AmÃ©liorer le processus d\'onboarding et d\'intÃ©gration des nouveaux employÃ©s');
    }
    
    if (youngEmployeesRisk > 60) {
      recommendations.push('DÃ©velopper des parcours de carriÃ¨re attractifs pour les jeunes talents');
    }
    
    if (temporaryContractsPercentage > 20) {
      recommendations.push('Ã‰valuer la possibilitÃ© de convertir certains CDD en CDI pour les talents clÃ©s');
    }
    
    recommendations.push('RÃ©aliser des entretiens de dÃ©part pour comprendre les motifs de turnover');
    recommendations.push('Mettre en place une enquÃªte de satisfaction et d\'engagement rÃ©guliÃ¨re');
    
    return {
      turnoverRate: Math.round(turnoverRate * 10) / 10,
      turnoverRiskIndex: Math.round(turnoverRiskIndex),
      highRiskEmployees: highTurnoverRiskCount,
      departmentRisks,
      ageGroupRisks,
      tenureGroupRisks,
      riskFactors,
      recommendations
    };
  }
}